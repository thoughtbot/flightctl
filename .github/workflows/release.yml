name: release
on:
  push:
    tags:
    - "v[0-9]+.[0-9]+.[0-9]+"
jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
      release_version: ${{ env.FLIGHTCTL_VERSION }}
    steps:
      - name: Get the release version from the tag
        shell: bash
        run: |
          echo "FLIGHTCTL_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "Releasing ${{ env.FLIGHTCTL_VERSION }}"
      - name: Create GitHub release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.FLIGHTCTL_VERSION }}
          release_name: ${{ env.FLIGHTCTL_VERSION }}

  build-release:
    name: build
    needs:
    - create-release
    strategy:
      matrix:
        build:
        - linux-x86_64
        - linux-aarch64
        - macos-x86_64
        - macos-aarch64
        - windows
        include:
        - build: linux-x86_64
          os: ubuntu-22.04
          toolchain: stable
          target: x86_64-unknown-linux-musl
          arch: x86_64
        - build: linux-aarch64
          os: ubuntu-22.04
          toolchain: stable
          target: aarch64-unknown-linux-musl
          arch: aarch64
        - build: macos-x86_64
          os: macos-11
          toolchain: stable
          target: x86_64-apple-darwin
          arch: x86_64
        - build: macos-aarch64
          os: macos-11
          toolchain: stable
          target: aarch64-apple-darwin
          arch: aarch64
        - build: windows
          os: windows-2019
          toolchain: stable
          target: x86_64-pc-windows-msvc
          arch: windows
    runs-on: ${{ matrix.os }}
    steps:

    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.toolchain }}
        target: ${{ matrix.target }}
        profile: minimal
        override: true

    - name: Install Cross
      shell: bash
      run: cargo install cross

    - name: Build release binary
      run: cross build --release --target "${{ matrix.target }}"

    - name: Build release archive
      shell: bash
      run: |
        archive="flightctl-${{ needs.create-release.outputs.release_version }}-${{ matrix.target }}"
        mkdir -p "$archive"
        cp target/${{ matrix.target }}/release/flightctl "$archive"
        cp README.md LICENSE "$archive"

        if [ "${{ matrix.os }}" = "windows-2019" ]; then
          7z a "$archive.zip" "$archive"
          echo "ASSET=$archive.zip" >> $GITHUB_ENV
        else
          tar czf "$archive.tar.gz" "$archive"
          echo "ASSET=$archive.tar.gz" >> $GITHUB_ENV
        fi

    - name: Upload release archive
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ env.ASSET }}
        asset_name: ${{ env.ASSET }}
        asset_content_type: application/octet-stream
